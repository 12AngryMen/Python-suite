from __future__  import division
from __pyshell__ import *
import numpy as np

# +++++++++ #
# PARSE GRO #
# +++++++++ #

class MD_MOLS(object):
	def __init__(self):
		self.mols = []
	def Add_MD_MOL(self, md_mol):
		self.mols.append(md_mol)
	def PrintInfo(self, verbose = False):
		print "# Molecules:", len(self.mols)
		mol_counter = 0
		for mol in self.mols:
			mol_counter += 1
			print mol_counter, 
			mol.PrintInfo(verbose)

class MD_MOL(object):
	def __init__(self):
		self.frags = []
		self.name = ''
	def Add_MD_FRAG(self, size):
		self.frags.append(MD_FRAG(len(self.frags)+1, size))
	def Add_MD_ATOM(self, rsdno, rsdname, atmno, atmname, pos):
		self.frags[-1].Add_MD_ATOM(rsdno, rsdname, atmno, atmname, pos)
	def Get_MD_FRAG(self, frag_id):
		return self.frags[frag_id-1]
	def Get_MD_ATOM(self, frag_id, _id):
		try:
			return self.frags[frag_id-1].Get_MD_ATOM(_id)
		except IndexError:
			return None
	def Find_Name(self):
		for frag in self.frags:
			self.name += frag.name[1:2]
		return self.name		
		
	def PrintInfo(self, verbose = False):
		print "MOL", self.name
		print "... # Fragments:", len(self.frags)
		for frag in self.frags:
			print "... ... Frag", frag.id, frag.name, "has", len(frag.atoms), "atoms."			
			if verbose:
				print "... ... ...",
				for atom in frag.atoms:
					print "[", atom.id, atom.name, atom.fragname, atom.fragid, "]",
				print "."

class MD_FRAG(object):
	def __init__(self, _id, size):
		self.atoms = []
		self.atomsdict = {}
		self.id = _id
		self.size = size
		self.name = ''
	def Add_MD_ATOM(self, rsdno, rsdname, atmno, atmname, pos):
		if len(self.atoms) == 0:
			self.name = rsdname
		self.atoms.append(MD_ATOM(rsdno, rsdname, atmno, atmname, pos, self.name))
		self.atomsdict[atmname] = self.atoms[-1]
		
	def Get_MD_ATOM(self, _id):
		assert len(self.atoms) == self.size
		return self.atoms[_id-1]
		
	def Get_MD_ATOM_BY_NAME(self, name):		
		return self.atomsdict[name]
		
class MD_ATOM(object):
	def __init__(self, rsdno, rsdname, atmno, atmname, pos, fragname):
		self.pos = pos		
		self.fragname = rsdname
		self.fragid = rsdno
		self.id = atmno
		self.name = atmname
		self.ctpfragname = fragname
		
	def write_gro_ln(self, outt):		
		atmNo   = self.id
		atmName = self.name
		rsdNo   = self.fragid
		rsdName = self.fragname
		atmpos  = self.pos
		x = atmpos[0]
		y = atmpos[1]
		z = atmpos[2]
		
		outt.write( str(rsdNo).rjust(5) )
		outt.write( str(rsdName).rjust(3) )
		outt.write( str(atmName).rjust(7) )
		outt.write( str(atmNo).rjust(5) )
		if x > 0:
			outt.write( '%.3f'.rjust(7) % (x) )
		else:
			outt.write( '-%.3f'.rjust(7) % (abs(x)))
		if y > 0:
			outt.write( '%.3f'.rjust(7) % (y) )
		else:
			outt.write( '-%.3f'.rjust(7) % (abs(y)))
		if z > 0:
			outt.write( '%.3f'.rjust(7) % (z) )
		else:
			outt.write( '-%.3f'.rjust(7) % (abs(z)))
		outt.write( ' \n' )
		


def MD_MOL_from_INFO(molinfo, PARTS):
	
	md_mol = MD_MOL()
	md_mol.Add_MD_FRAG(PARTS[0])
	atom_counter = 0
	frag_counter = 0
	for entry in molinfo:
		atom_counter += 1
		
		if atom_counter > PARTS[frag_counter]:
			# Finished fragment
			atom_counter = 1
			frag_counter += 1
			md_mol.Add_MD_FRAG(PARTS[frag_counter])
		
		md_mol.Add_MD_ATOM(entry[0],entry[1],entry[2],entry[3],entry[4])
		
	
	mol_name = md_mol.Find_Name()
	
	return md_mol, mol_name	

def MD_MOLS_from_FILE(infile, UNITS, UNITATOMS, PARTS, BOX):
	
	md_mols = MD_MOLS()
	
	stop_count_at = UNITS*UNITATOMS

	info = []
	intt = open(infile, 'r')
	atom_count = 0
	for ln in intt.readlines():
		atom = read_gro_ln(ln)
		if atom != None:
			atom_count += 1
			info.append(atom)
			if stop_count_at == atom_count:
				break
		else:
			print ln
	
	for i in range(UNITS):
		molinfo = info[i*UNITATOMS:(i+1)*UNITATOMS]
		md_mol, mol_name = MD_MOL_from_INFO(molinfo, PARTS)	
		md_mols.Add_MD_MOL(md_mol)
	
	return md_mols

# +++++++++ #
# WRITE GRO #
# +++++++++ #

def mols_to_gro(md_mols, outfile, mode, BOX, UNITS, UNITATOMS):
	
	outt = open(outfile,mode)
	outt.write('GENERATED BY GRO2MOLECULES.PY \n')
	outt.write('%5d \n' % (UNITS*UNITATOMS))
	
	for mol in md_mols.mols:
		for frag in mol.frags:
			for atom in frag.atoms:
				atom.write_gro_ln(outt)
	
	outt.write(BOX)
	outt.write('\n')
	outt.close()
